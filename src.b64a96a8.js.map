{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","array","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,GACL,IAAIC,QAAQC,IACjBC,WAAW,KACTD,KAAWF,MACVA,KAGDI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACZjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAExD,OAAA,IAAIhB,QAASC,IAClBA,EAAQa,MAINX,EAASW,GAAgBT,QAAQY,MAAMH,GAI7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACrBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB3B,MAAAA,EAAQoB,EAA0B,IAAK,KAGtC,OAAA,IAAIlB,QAAQ,CAACC,EAASyB,KACrBC,MAAAA,EAAaN,KAAKE,SAAW,GAC7BK,EAAQ,CAACH,EAAYI,GAAI/B,GAC/BI,WAAW,KACHyB,EACJ1B,EAAQ2B,GAGVF,EAAOD,EAAYI,KAElB/B,MAODgC,EAAa,EAAED,EAAIzB,MACvBC,QAAQC,mBAAmBuB,kBAAmBzB,QAG1C2B,EAAWF,IACfxB,QAAQ2B,qCAAqCH,+BAI/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH,GAETP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAC/B1B,KAAKuB,GACLI,MAAMH,GAETP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GACLI,MAAMH;;AC5CT,aAJA,QAAA,oBAEA,QAAA,iBACA,QAAA,iBACA,QAAA","file":"src.b64a96a8.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(`${ms}`);\n    }, ms);\n  });\n};\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n  return new Promise((resolve)=>{\n    resolve(updatedUsers)\n  })\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  \n\n  return new Promise((resolve, reject) => {\n    const canProcess = Math.random() > 0.3;\n    const array = [transaction.id, delay];\n    setTimeout(() => {\n        if (canProcess) {\n        resolve(array);\n        \n      }else{\n      reject(transaction.id);\n      }\n    }, delay);\n    \n\n  });\n  \n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","import './sass/main.scss';\n\nimport './js/task1.js';\nimport './js/task2.js';\nimport './js/task3.js'\n\n\n"]}